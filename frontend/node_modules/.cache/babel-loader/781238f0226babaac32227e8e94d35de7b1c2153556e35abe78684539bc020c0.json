{"ast":null,"code":"var _jsxFileName = \"D:\\\\sispak\\\\Sistem Pakar\\\\mern-sistempakardokter\\\\frontend\\\\src\\\\pages\\\\AdminDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminDashboard() {\n  _s();\n  const [rules, setRules] = useState([]);\n  const [newRule, setNewRule] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    fetchRules();\n  }, []);\n  const fetchRules = async () => {\n    try {\n      const res = await axios.get('http://localhost:5000/api/knowledge-base');\n      setRules(res.data);\n    } catch (err) {\n      setMessage('Failed to fetch rules');\n    }\n  };\n  const handleAddRule = async () => {\n    if (!newRule.trim()) return;\n    const rulesArray = newRule.split('\\n').map(rule => rule.trim()).filter(rule => rule.length > 0);\n    if (rulesArray.length === 0) return;\n    setIsLoading(true);\n    try {\n      await axios.post('http://localhost:5000/api/knowledge-base', {\n        rule: rulesArray\n      });\n      setNewRule('');\n      setMessage('Rules added successfully');\n      fetchRules();\n    } catch (err) {\n      setMessage('Failed to add rules');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 600,\n      margin: 'auto',\n      padding: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Admin Dashboard - Manage Knowledge Base\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        rows: \"6\",\n        style: {\n          width: '100%',\n          padding: 10\n        },\n        value: newRule,\n        onChange: e => setNewRule(e.target.value),\n        placeholder: \"Enter new rules, one per line, e.g. IF symptom1 AND symptom2 THEN diagnosis='disease'\",\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddRule,\n        style: {\n          marginTop: 10\n        },\n        disabled: isLoading,\n        children: isLoading ? 'Adding...' : 'Add Rules'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 20\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fileUpload\",\n        children: \"Or upload a .txt file with rules:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"fileUpload\",\n        accept: \".txt\",\n        disabled: isLoading,\n        onChange: async e => {\n          const file = e.target.files[0];\n          if (!file) return;\n          if (file.type !== 'text/plain') {\n            setMessage('Please upload a valid .txt file');\n            return;\n          }\n          setIsLoading(true);\n          setMessage('');\n          try {\n            const text = await file.text();\n            const rulesFromFile = text.split('\\n').map(line => line.trim()).filter(line => line.length > 0);\n            if (rulesFromFile.length === 0) {\n              setMessage('The uploaded file is empty');\n              setIsLoading(false);\n              return;\n            }\n            await axios.post('http://localhost:5000/api/knowledge-base', {\n              rule: rulesFromFile\n            });\n            setMessage('Rules from file added successfully');\n            fetchRules();\n          } catch (err) {\n            setMessage('Failed to add rules from file');\n          } finally {\n            setIsLoading(false);\n            e.target.value = null; // reset file input\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Existing Rules\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: rules.map(rule => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: rule.rule\n      }, rule._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminDashboard, \"pvzk5D/2o4gZnmLsoptxMtIfl7Q=\");\n_c = AdminDashboard;\nexport default AdminDashboard;\nvar _c;\n$RefreshReg$(_c, \"AdminDashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","AdminDashboard","_s","rules","setRules","newRule","setNewRule","isLoading","setIsLoading","message","setMessage","fetchRules","res","get","data","err","handleAddRule","trim","rulesArray","split","map","rule","filter","length","post","style","maxWidth","margin","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","rows","width","value","onChange","e","target","placeholder","disabled","onClick","marginTop","htmlFor","type","id","accept","file","files","text","rulesFromFile","line","_id","_c","$RefreshReg$"],"sources":["D:/sispak/Sistem Pakar/mern-sistempakardokter/frontend/src/pages/AdminDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction AdminDashboard() {\r\n  const [rules, setRules] = useState([]);\r\n  const [newRule, setNewRule] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetchRules();\r\n  }, []);\r\n\r\n  const fetchRules = async () => {\r\n    try {\r\n      const res = await axios.get('http://localhost:5000/api/knowledge-base');\r\n      setRules(res.data);\r\n    } catch (err) {\r\n      setMessage('Failed to fetch rules');\r\n    }\r\n  };\r\n\r\n  const handleAddRule = async () => {\r\n    if (!newRule.trim()) return;\r\n    const rulesArray = newRule\r\n      .split('\\n')\r\n      .map(rule => rule.trim())\r\n      .filter(rule => rule.length > 0);\r\n    if (rulesArray.length === 0) return;\r\n    setIsLoading(true);\r\n    try {\r\n      await axios.post('http://localhost:5000/api/knowledge-base', { rule: rulesArray });\r\n      setNewRule('');\r\n      setMessage('Rules added successfully');\r\n      fetchRules();\r\n    } catch (err) {\r\n      setMessage('Failed to add rules');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ maxWidth: 600, margin: 'auto', padding: 20 }}>\r\n      <h2>Admin Dashboard - Manage Knowledge Base</h2>\r\n      {message && <p>{message}</p>}\r\n      <div>\r\n      <textarea\r\n        rows=\"6\"\r\n        style={{ width: '100%', padding: 10 }}\r\n        value={newRule}\r\n        onChange={(e) => setNewRule(e.target.value)}\r\n        placeholder=\"Enter new rules, one per line, e.g. IF symptom1 AND symptom2 THEN diagnosis='disease'\"\r\n        disabled={isLoading}\r\n      />\r\n      <button onClick={handleAddRule} style={{ marginTop: 10 }} disabled={isLoading}>\r\n        {isLoading ? 'Adding...' : 'Add Rules'}\r\n      </button>\r\n      </div>\r\n      <div style={{ marginTop: 20 }}>\r\n        <label htmlFor=\"fileUpload\">Or upload a .txt file with rules:</label><br />\r\n        <input\r\n          type=\"file\"\r\n          id=\"fileUpload\"\r\n          accept=\".txt\"\r\n          disabled={isLoading}\r\n          onChange={async (e) => {\r\n            const file = e.target.files[0];\r\n            if (!file) return;\r\n            if (file.type !== 'text/plain') {\r\n              setMessage('Please upload a valid .txt file');\r\n              return;\r\n            }\r\n            setIsLoading(true);\r\n            setMessage('');\r\n            try {\r\n              const text = await file.text();\r\n              const rulesFromFile = text\r\n                .split('\\n')\r\n                .map(line => line.trim())\r\n                .filter(line => line.length > 0);\r\n              if (rulesFromFile.length === 0) {\r\n                setMessage('The uploaded file is empty');\r\n                setIsLoading(false);\r\n                return;\r\n              }\r\n              await axios.post('http://localhost:5000/api/knowledge-base', { rule: rulesFromFile });\r\n              setMessage('Rules from file added successfully');\r\n              fetchRules();\r\n            } catch (err) {\r\n              setMessage('Failed to add rules from file');\r\n            } finally {\r\n              setIsLoading(false);\r\n              e.target.value = null; // reset file input\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n      <h3>Existing Rules</h3>\r\n      <ul>\r\n        {rules.map((rule) => (\r\n          <li key={rule._id}>{rule.rule}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}